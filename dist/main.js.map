{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;ACAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACzCA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AAoBA;AACA;AAQA;;;;;;;;;;;;;;;ACpDA;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvBA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;ACTA;AACA;AACA;;;;;;;;;;;;;;;;ACFA;AACA;;;;;;;;;;;;;;;;;;;;ACDA;AACA;AAEA;AAIA;AAEA;AAKA;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA","sources":["webpack://@cs-magic/exts_chrome_chatbot-exporter/../../assets/styles/main.css","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/main.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/react/row.tsx","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/const.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/exportChats.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/getContentAreaElement.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/getConversationName.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/platform.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/../claude-artifact-enhancer/src/react/bridge.tsx","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages_frontend/common/dist/element2image.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages_frontend/react/dist/hooks/use-dark-mode.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages_frontend/shadcn/dist/lib/utils.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages_frontend/shadcn/dist/ui/button.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages_frontend/shadcn/dist/ui/separator.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/common/dist/datetime/format-today.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","import { mountReactApp } from \"@cs-magic/exts_chrome_claude-artifact-enhancer/src/react/bridge\"; // Check for dark mode preference\nimport { Row } from \"./react/row\";\n\nimport \"../../../assets/styles/main.css\";\nimport { CHATBOT_EXPORTER_APP_ID } from \"./utils/const\";\nimport { getInputAreaElement } from \"./utils/getContentAreaElement\";\n\n// Check for dark mode preference\nif (\n  localStorage.theme === \"dark\" ||\n  (!(\"theme\" in localStorage) &&\n    window.matchMedia(\"(prefers-color-scheme: dark)\").matches)\n) {\n  document.documentElement.classList.add(\"dark\");\n} else {\n  document.documentElement.classList.remove(\"dark\");\n}\n\nconst observer = new MutationObserver(async (mutations, observer) => {\n  const inputAreaElement = getInputAreaElement();\n  if (!inputAreaElement) return;\n\n  const app = document.querySelector(`#${CHATBOT_EXPORTER_APP_ID}`);\n  if (!app) {\n    console.log(\"-- mounting\");\n\n    const div = document.createElement(\"div\");\n    div.id = CHATBOT_EXPORTER_APP_ID;\n\n    mountReactApp(div, Row);\n\n    inputAreaElement.parentElement.insertBefore(\n      // why div is ok, but div.firstElementChild is null\n      div,\n      inputAreaElement,\n    );\n  } else if (app.nextElementSibling !== inputAreaElement) {\n    console.log(\"-- re-mounting\");\n    app.remove();\n  }\n});\nobserver.observe(document.body, { subtree: true, childList: true });\n","import { Button } from \"@cs-magic/shadcn/dist/ui/button\";\nimport { Separator } from \"@cs-magic/shadcn/dist/ui/separator\";\nimport { cn } from \"@cs-magic/shadcn/dist/lib/utils\";\nimport { useDarkMode } from \"@cs-magic/react/dist/hooks/use-dark-mode\";\nimport { isChatgpt } from \"../utils/platform\";\nimport { exportChats } from \"../utils/exportChats\";\nimport React from \"react\";\n\nexport const Row = () => {\n  const isDark = useDarkMode();\n  const theme = isDark\n    ? \"bg-gray-800 text-gray-200\"\n    : \"bg-gray-200 text-gray-800\";\n\n  // console.log(\"matchMedia: \", window.matchMedia);\n\n  const S = () => (\n    <Separator\n      orientation={\"horizontal\"}\n      className={cn(\"grow w-auto bg-gray-900 \", theme)}\n    />\n  );\n\n  return (\n    <div\n      className={cn(\n        \"flex justify-center items-center w-full overflow-hidden gap-2\",\n        isChatgpt() && \"m-2\",\n      )}\n    >\n      <div\n        className={cn(\n          \"flex justify-center items-center w-full\",\n          isChatgpt() && \"md:max-w-3xl lg:max-w-[40rem] xl:max-w-[48rem]\",\n        )}\n      >\n        <S />\n        <Button\n          className={cn(\n            \"shrink-0 hover:bg-gray-300 dark:hover:bg-gray-700\",\n            theme,\n          )}\n          onClick={() => {\n            exportChats({ isDark });\n          }}\n        >\n          Export\n        </Button>\n        <S />\n      </div>\n    </div>\n  );\n};\n","export const CHATBOT_EXPORTER_APP_ID = \"chatbot-exporter\";\n","import { CHATBOT_EXPORTER_APP_ID } from \"@/utils/const\";\nimport { element2image } from \"@cs-magic/common-frontend/element2image\";\nimport { formatToday } from \"@cs-magic/common/dist/datetime/format-today\";\nimport { getConversationName } from \"./getConversationName\";\nimport { isChatgpt } from \"./platform\";\n\nexport const exportChats = ({ isDark }: { isDark: boolean }) => {\n  let targetElement = document.querySelector(\n    `#${CHATBOT_EXPORTER_APP_ID}`,\n  ).previousElementSibling;\n  if (isChatgpt())\n    targetElement = targetElement.querySelector(\n      // 4个不行，5 个缺头部，6 个比较完整\n      \":first-child > :first-child > :first-child > :first-child > :first-child > :first-child\",\n    );\n\n  void element2image(targetElement as HTMLElement, {\n    approach: isChatgpt() ? \"html2canvas\" : \"modern-screenshot\",\n    filename: `${formatToday()} - chat - ${getConversationName()}.jpeg`,\n    backgroundColor: isDark\n      ? \"#171717\" // \"rgb(249, 249, 249)\",\n      : \"white\",\n  });\n};\n","import { isChatgpt, isClaude } from \"./platform\";\n\nexport const getInputAreaElement = () => {\n  if (isClaude())\n    // .parentElement.firstElementChild 在初始化问题页的时候有 bug\n    return document.querySelector(\".sticky.bottom-0\");\n\n  if (isChatgpt())\n    return document.querySelector(\".composer-parent\")?.lastElementChild;\n};\n","export const getConversationName = () => {\n  return document.querySelector(\"title\").textContent;\n};\n","export const isChatgpt = () => window.origin.includes(\"chatgpt.com\");\nexport const isClaude = () => window.origin.includes(\"claude.ai\");\n","import ReactDOM from \"react-dom/client\";\nimport React from \"react\";\n\nexport const mountReactApp = (\n  container: HTMLElement,\n  ReactElement: () => JSX.Element,\n) => {\n  const root = ReactDOM.createRoot(container);\n\n  root.render(\n    <React.StrictMode>\n      <ReactElement />\n    </React.StrictMode>,\n  );\n};\n","import html2canvas from \"html2canvas\";\nimport { domToDataUrl } from \"modern-screenshot\"; // Function to get the maximum width based on viewport\nexport const svgElement2svgString = (svg) => new XMLSerializer().serializeToString(svg);\n// Function to get the maximum width based on viewport\nfunction getMaxWidth() {\n    if (window.innerWidth >= 1280) {\n        return 768; // xl:max-w-[48rem]\n    }\n    else if (window.innerWidth >= 1024) {\n        return 640; // lg:max-w-[40rem]\n    }\n    else if (window.innerWidth >= 768) {\n        return 768; // md:max-w-3xl\n    }\n    return window.innerWidth; // For smaller screens, use full width\n}\nexport const element2image = async (element, { approach = \"modern-screenshot\", filename = \"screenshot\", backgroundColor = \"white\", format = \"jpeg\", }) => {\n    console.log(\"-- element2png start\");\n    let data;\n    const maxWidth = getMaxWidth();\n    // 此时可以进行截图操作\n    switch (approach) {\n        case \"html2canvas\":\n            const canvas = await html2canvas(element, {\n                logging: true,\n                allowTaint: true,\n                useCORS: true, // scrollY: -window.scrollY,\n                height: element.scrollHeight,\n                windowHeight: element.scrollHeight,\n                backgroundColor: backgroundColor, // chatgpt (#171717)\n                scale: 2,\n            });\n            // Crop the canvas if necessary\n            // todo: 剪切还有点问题\n            // if (canvas.width > maxWidth) {\n            //   const croppedCanvas = document.createElement(\"canvas\");\n            //   croppedCanvas.width = maxWidth;\n            //   croppedCanvas.height = canvas.height;\n            //   const ctx = croppedCanvas.getContext(\"2d\");\n            //   const centerShift = (canvas.width - maxWidth) / 2;\n            //   ctx.drawImage(\n            //     canvas,\n            //     centerShift,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //     0,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //   );\n            //   data = croppedCanvas.toDataURL(\"image/png\");\n            // } else\n            data = canvas.toDataURL(\"image/jpeg\");\n            break;\n        case \"modern-screenshot\":\n            data = await domToDataUrl(element, {\n                scale: 2,\n                quality: 0.7,\n                backgroundColor: backgroundColor,\n            });\n            break;\n    }\n    const link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = data;\n    link.click();\n    console.log(\"-- element2png end\");\n};\n//# sourceMappingURL=element2image.js.map","import { useMediaQuery } from \"react-responsive\";\nexport const useDarkMode = () => useMediaQuery({\n    query: \"(prefers-color-scheme: dark)\",\n});\n//# sourceMappingURL=use-dark-mode.js.map","import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}\n//# sourceMappingURL=utils.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../lib/utils\";\nconst buttonVariants = cva(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return _jsx(Comp, { className: cn(buttonVariants({ variant, size, className })), ref: ref, ...props });\n});\nButton.displayName = \"Button\";\nexport { Button, buttonVariants };\n//# sourceMappingURL=button.js.map","\"use client\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\";\nimport * as React from \"react\";\nimport { cn } from \"../lib/utils\";\nconst Separator = React.forwardRef(({ className, orientation = \"horizontal\", decorative = true, ...props }, ref) => (_jsx(SeparatorPrimitive.Root, { ref: ref, decorative: decorative, orientation: orientation, className: cn(\"shrink-0 bg-border\", orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\", className), ...props })));\nSeparator.displayName = SeparatorPrimitive.Root.displayName;\nexport { Separator };\n//# sourceMappingURL=separator.js.map","export const formatToday = (format = \"YYYY-mm-dd\") => {\n    const today = new Date();\n    return today.toISOString().split(\"T\")[0];\n};\n//# sourceMappingURL=format-today.js.map"],"names":[],"sourceRoot":""}