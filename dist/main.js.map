{"version":3,"file":"main.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACTA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;;;;;;;;;;;;;;;;ACtBA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACTA;AACA;AACA;;;;;;;;;;;;;;;;;ACFA;AAEA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AAAA;AAEA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACrEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACjCA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA","sources":["webpack://@cs-magic/exts_chrome_chatbot-exporter/../../assets/styles/main.css","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/config.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/main.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/react/entry.tsx","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/const.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/getConversationName.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/parse-document.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/platform.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/./src/utils/use-export-chats.ts","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/frontend-common/dist/element2image.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/frontend-shadcn/dist/lib/utils.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/frontend-shadcn/dist/ui/button.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/frontend/dist/hooks/use-dark-mode.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/frontend/dist/utils/mount-react-app.js","webpack://@cs-magic/exts_chrome_chatbot-exporter/../../packages/common/dist/datetime/format-today.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export const APP_ID = \"chatbot-exporter\";\n","import { APP_ID } from \"@/config\";\nimport { mountReactApp } from \"@cs-magic/react/utils/mount-react-app\"; // Check for dark mode preference\nimport { Entry } from \"./react/entry\";\n\nimport \"../../../assets/styles/main.css\";\n\nconsole.log(APP_ID, \"init...\");\nconst element = document.createElement(\"div\");\ndocument.body.appendChild(element);\nmountReactApp(element, Entry);\n","import { useExportChats } from \"@/utils/use-export-chats\";\nimport { useDarkMode } from \"@cs-magic/react/hooks/use-dark-mode\";\nimport { Button } from \"@cs-magic/shadcn/ui/button\";\nimport React from \"react\";\n\nexport const Entry = () => {\n  const isDark = useDarkMode();\n  const theme = isDark\n    ? \"bg-gray-800 text-gray-200\"\n    : \"bg-gray-200 text-gray-800\";\n\n  // console.log(\"matchMedia: \", window.matchMedia);\n  const exportChats = useExportChats();\n\n  return (\n    <Button\n      onClick={exportChats}\n      className={\"fixed bottom-1/2 right-2 sm:right-4\"}\n    >\n      Export\n    </Button>\n  );\n};\n","export const CHATBOT_EXPORTER_APP_ID = \"exts_chrome_chatbot-exporter\";\n\nexport enum LlmPlatform {\n  default = \"default\",\n  Claude = \"Claude\",\n  ChatGPT = \"ChatGPT\",\n  Perplexity = \"Perplexity\",\n  Mita = \"Mita\",\n  JieYue = \"JieYue\",\n}\n","export const getConversationName = () => {\n  return document.querySelector(\"title\").textContent;\n};\n","import { LlmPlatform } from \"@/utils/const\";\n\nexport const checkLlmPlatform = (): LlmPlatform => {\n  const url = window.location.href.toLowerCase();\n  console.log({ url });\n\n  if (url.startsWith(\"https://chatgpt.com/c/\")) return LlmPlatform.ChatGPT;\n\n  if (url.startsWith(\"https://claude.ai/chat/\")) return LlmPlatform.Claude;\n\n  if (url.startsWith(\"https://www.perplexity.ai/search/\"))\n    return LlmPlatform.Perplexity;\n\n  if (url.startsWith(\"https://metaso.cn/search/\")) return LlmPlatform.Mita;\n\n  if (url.startsWith(\"https://yuewen.cn/chats/\")) return LlmPlatform.JieYue;\n\n  return LlmPlatform.default;\n};\n\nexport const getScreenshotAreaElement = () => {\n  const llmPlatform = checkLlmPlatform();\n\n  console.log({ llmPlatform });\n\n  switch (llmPlatform) {\n    case LlmPlatform.Perplexity:\n      return document.querySelector(\".col-span-8\");\n\n    case LlmPlatform.ChatGPT:\n      return document.querySelector(\".composer-parent\").firstElementChild;\n\n    case LlmPlatform.Claude:\n      return document.querySelector(\".sticky.bottom-0\").previousElementSibling;\n\n    case LlmPlatform.Mita:\n      return document.querySelector(\"[class*='Search_search-result__']\");\n\n    case LlmPlatform.JieYue:\n      return document.querySelector(\"[class*='message-list_inner__']\");\n\n    default:\n      return null;\n  }\n};\n","export const isChatgpt = () => window.origin.includes(\"chatgpt.com\");\nexport const isClaude = () => window.origin.includes(\"claude.ai\");\nexport const isPerplexityAI = () => window.origin.includes(\"perplexity.ai\");\n","import { getScreenshotAreaElement } from \"@/utils/parse-document\";\nimport { element2image } from \"@cs-magic/common-frontend/element2image\";\nimport { formatToday } from \"@cs-magic/common/datetime/format-today\";\nimport { useDarkMode } from \"@cs-magic/react/hooks/use-dark-mode\";\nimport { getConversationName } from \"./getConversationName\";\nimport { isChatgpt } from \"./platform\";\n\nexport const useExportChats = () => {\n  const backgroundColor = useDarkMode() ? \"#21211E\" : \"white\";\n\n  return () => {\n    const element = getScreenshotAreaElement() as HTMLElement;\n    if (!element) return alert(\"no content to be exported\");\n\n    console.log({ element });\n    void element2image(element, {\n      approach: isChatgpt() ? \"html2canvas\" : \"modern-screenshot\",\n      filename: `${formatToday()} - chat - ${getConversationName()}.jpeg`,\n      backgroundColor: backgroundColor,\n    });\n  };\n};\n","import html2canvas from \"html2canvas\";\nimport { domToDataUrl } from \"modern-screenshot\"; // Function to get the maximum width based on viewport\nexport const svgElement2svgString = (svg) => new XMLSerializer().serializeToString(svg);\n// Function to get the maximum width based on viewport\nfunction getMaxWidth() {\n    if (window.innerWidth >= 1280) {\n        return 768; // xl:max-w-[48rem]\n    }\n    else if (window.innerWidth >= 1024) {\n        return 640; // lg:max-w-[40rem]\n    }\n    else if (window.innerWidth >= 768) {\n        return 768; // md:max-w-3xl\n    }\n    return window.innerWidth; // For smaller screens, use full width\n}\nexport const element2image = async (element, { approach = \"modern-screenshot\", filename = \"screenshot\", backgroundColor = \"white\", format = \"jpeg\", }) => {\n    console.log(\"-- element2png start\");\n    let data;\n    const maxWidth = getMaxWidth();\n    // 此时可以进行截图操作\n    switch (approach) {\n        case \"html2canvas\":\n            const canvas = await html2canvas(element, {\n                logging: true,\n                allowTaint: true,\n                useCORS: true, // scrollY: -window.scrollY,\n                height: element.scrollHeight,\n                windowHeight: element.scrollHeight,\n                backgroundColor: backgroundColor, // chatgpt (#171717)\n                scale: 2,\n            });\n            // Crop the canvas if necessary\n            // todo: 剪切还有点问题\n            // if (canvas.width > maxWidth) {\n            //   const croppedCanvas = document.createElement(\"canvas\");\n            //   croppedCanvas.width = maxWidth;\n            //   croppedCanvas.height = canvas.height;\n            //   const ctx = croppedCanvas.getContext(\"2d\");\n            //   const centerShift = (canvas.width - maxWidth) / 2;\n            //   ctx.drawImage(\n            //     canvas,\n            //     centerShift,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //     0,\n            //     0,\n            //     maxWidth,\n            //     canvas.height,\n            //   );\n            //   data = croppedCanvas.toDataURL(\"image/png\");\n            // } else\n            data = canvas.toDataURL(\"image/jpeg\");\n            break;\n        case \"modern-screenshot\":\n            data = await domToDataUrl(element, {\n                scale: 2,\n                quality: 0.7,\n                backgroundColor: backgroundColor,\n            });\n            break;\n    }\n    const link = document.createElement(\"a\");\n    link.download = filename;\n    link.href = data;\n    link.click();\n    console.log(\"-- element2png end\");\n};\n//# sourceMappingURL=element2image.js.map","import { clsx } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\nexport function cn(...inputs) {\n    return twMerge(clsx(inputs));\n}\n//# sourceMappingURL=utils.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { cva } from \"class-variance-authority\";\nimport * as React from \"react\";\nimport { cn } from \"../lib/utils\";\nconst buttonVariants = cva(\"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\", {\n    variants: {\n        variant: {\n            default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n            destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n            outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n            secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            ghost: \"hover:bg-accent hover:text-accent-foreground\",\n            link: \"text-primary underline-offset-4 hover:underline\",\n        },\n        size: {\n            default: \"h-10 px-4 py-2\",\n            sm: \"h-9 rounded-md px-3\",\n            lg: \"h-11 rounded-md px-8\",\n            icon: \"h-10 w-10\",\n        },\n    },\n    defaultVariants: {\n        variant: \"default\",\n        size: \"default\",\n    },\n});\nconst Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return _jsx(Comp, { className: cn(buttonVariants({ variant, size, className })), ref: ref, ...props });\n});\nButton.displayName = \"Button\";\nexport { Button, buttonVariants };\n//# sourceMappingURL=button.js.map","import { useMediaQuery } from \"react-responsive\";\nexport const useDarkMode = () => useMediaQuery({\n    query: \"(prefers-color-scheme: dark)\",\n});\n//# sourceMappingURL=use-dark-mode.js.map","import { jsx as _jsx } from \"react/jsx-runtime\";\nimport ReactDOM from \"react-dom/client\";\nimport React from \"react\";\nexport const mountReactApp = (container, ReactElement) => {\n    const root = ReactDOM.createRoot(container);\n    root.render(_jsx(React.StrictMode, { children: _jsx(ReactElement, {}) }));\n};\n//# sourceMappingURL=mount-react-app.js.map","export const formatToday = (format = \"YYYY-mm-dd\") => {\n    const today = new Date();\n    return today.toISOString().split(\"T\")[0];\n};\n//# sourceMappingURL=format-today.js.map"],"names":[],"sourceRoot":""}